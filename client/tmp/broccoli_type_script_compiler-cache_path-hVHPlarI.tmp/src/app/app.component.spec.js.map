{"version":3,"file":"app.component.spec.js","sourceRoot":"","sources":["../Users/MMT/pokemans/pokebase_cli/tmp/broccoli_type_script_compiler-input_base_path-yISLAEmG.tmp/0/src/app/app.component.spec.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,8BAA6B,iBAAiB,CAAC,CAAA;AAE/C,wBAA8B,uBAAuB,CAAC,CAAA;AAEtD,wBAAqC,uBAAuB,CAAC,CAAA;AAE7D,iCAA+B,2BAA2B,CAAC,CAAA;AAK3D,8BAA8B;AAE9B,eAAe;AACf,QAAQ,CAAC,YAAY,EAAE;IACrB,EAAE,CAAC,2BAA2B,EAAE;QAC9B,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,uBAAuB,EAAE;IAEhC,EAAE,CAAC,8BAA8B,EAC/B,eAAK,CAAC,gBAAM,CAAC,CAAC,8BAAoB,CAAC,EAAE,UAAC,GAAyB;QAE/D,GAAG,CAAC,WAAW,CAAC,4BAAY,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;YACxC,MAAM,CAAC,OAAO,CAAC,iBAAiB,YAAY,4BAAY,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;QACrG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC,CAAC,CAAC;IAEL,EAAE,CAAC,gCAAgC,EACjC,eAAK,CAAC,gBAAM,CAAC,CAAC,8BAAoB,CAAC,EAAE,UAAC,GAAyB;QAE7D,GAAG,CAAC,WAAW,CAAC,4BAAY,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;YAC1C,2FAA2F;YAE3F,IAAI,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,IAAI,KAAK,IAAI,EAAhB,CAAgB,CAAC,CAAC,aAAa,CAAC,CAAE,WAAW;YAEnF,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,qBAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,CAAY,YAAY;YAExF,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,iDAAiD,CAAC,CAAC;QACpG,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport { AppComponent } from './app.component';\n\nimport { async, inject } from '@angular/core/testing';\n\nimport { TestComponentBuilder } from '@angular/core/testing';\n\nimport { By }             from '@angular/platform-browser';\nimport { provide }        from '@angular/core';\nimport { ViewMetadata }   from '@angular/core';\nimport { PromiseWrapper } from '@angular/core/src/facade/promise';\n\n////////  SPECS  /////////////\n\n/// Delete this\ndescribe('Smoke test', () => {\n  it('should run a passing test', () => {\n    expect(true).toEqual(true, 'should pass');\n  });\n});\n\ndescribe('AppComponent with TCB', function () {\n\n  it('should instantiate component',\n    async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n\n    tcb.createAsync(AppComponent).then(fixture => {\n      expect(fixture.componentInstance instanceof AppComponent).toBe(true, 'should create AppComponent');\n    });\n  })));\n\n  it('should have expected <h1> text',\n    async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n\n      tcb.createAsync(AppComponent).then(fixture => {\n      // fixture.detectChanges();  // would need to resolve a binding but we don't have a binding\n\n      let h1 = fixture.debugElement.query(el => el.name === 'h1').nativeElement;  // it works\n\n          h1 = fixture.debugElement.query(By.css('h1')).nativeElement;            // preferred\n\n      expect(h1.innerText).toMatch(/angular 2 app/i, '<h1> should say something about \"Angular 2 App\"');\n    });\n\n  })));\n});\n"]}